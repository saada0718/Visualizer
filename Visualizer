import pygame
import  time

pygame.init()
LENGTH = 1920
HEIGHT = 1080

LIGHT_YELLOW = (242,208,167)
LIGHT_PINK = (191,122,160)
BROWN = (136,56,45)
LIGHT_BLUE = (0,181,236)
LIME = (204,255,0)
PURPLE = (255,255,255)
BLACK = (0,0,0)
WHITE = (255,255,255)

NODE_WIDTH = 100
NODE_HEIGHT = 50

CONNECTOR_LENGTH = 400

CURR_PLACE = (10,10)

win = pygame.display.set_mode((LENGTH, HEIGHT))
win.fill(BLACK)


class node():
    def __init__(self,x,y,amnt,line = None):
        self.x = x
        self.y = y
        self.amnt = amnt
        self.line = line
        self.animation = False


class connector():
    def __init__(self,x_first,y_first,x_second,y_second):
        self.x_first = x_first
        self.y_first = y_first
        self.x_second = x_second
        self.y_second = y_second


class button():
    def __init__(self, color, x, y, width, height, text=''):
        self.color = color
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.text = text
        self.clicked = False

    def draw(self, win, outline=None):
        if outline:
            pygame.draw.rect(win, outline, (self.x - 2, self.y - 2, self.width + 4, self.height + 4), 0)
        pygame.draw.rect(win, self.color, (self.x, self.y, self.width, self.height), 0)

        if self.text != '':
            font = pygame.font.SysFont('comicsans', 60)
            text = font.render(self.text, 1, (0, 0, 0))
            win.blit(text, (
            self.x + (self.width / 2 - text.get_width() / 2), self.y + (self.height / 2 - text.get_height() / 2)))
    def isOver(self, pos):
        if pos[0] > self.x and pos[0] < self.x + self.width:
            if pos[1] > self.y and pos[1] < self.y + self.height:
                return True
        return False


def redrawWindow():
    win.fill(LIGHT_PINK)
    temp_font = pygame.font.SysFont('comicsans',200)
    _message_to_screen("Pick the Algorithm!",LIGHT_YELLOW,temp_font)
    A_star_search_path.draw(win)
    bubble_sort.draw(win)
    linked_list.draw(win)
    maze_generator.draw(win)
    pygame.display.set_caption('Algorithm Visualizer')



def linked_list_final_node():
    for i in range(first_node.amnt-1):
        if i>0:
            pygame.draw.rect(win,WHITE,(i*200,500,100,100),0)
        else:
            pygame.draw.rect(win,WHITE,(10,500,100,100),0)



def draw_linked_list():
    win.fill(LIGHT_BLUE)
    back_linked_list.draw(win)
    add_linked_list.draw(win)
    pygame.display.set_caption('Linked List')
    if not(first_node.animation):
        linked_list_final_node()



#This is a helper function that will display the text given by the user to the screen
def _message_to_screen(msg,color,test_font):
    screen_text = test_font.render(msg,True,color)
    text_rect = screen_text.get_rect(center = (LENGTH/2,100))
    win.blit(screen_text,text_rect)


def click_back():
    A_star_search_path.clicked = False
    bubble_sort.clicked = False
    linked_list.clicked = False
    maze_generator.clicked = False
    add_linked_list.clicked = False
    first_node.amnt = 0


def over():
    if event.type == pygame.MOUSEMOTION:
        if linked_list.clicked == True:
            if back_linked_list.isOver(pos):
                back_linked_list.color = (0, 0, 0)
            else:
                back_linked_list.color = LIME
            if add_linked_list.isOver(pos):
                add_linked_list.color = (0, 0, 0)
            else:
                add_linked_list.color = LIME
        if A_star_search_path.isOver(pos):
            A_star_search_path.color = (0, 0, 0)
        else:
            A_star_search_path.color = BROWN
        if bubble_sort.isOver(pos):
            bubble_sort.color = (0, 0, 0)
        else:
            bubble_sort.color = BROWN

        if linked_list.isOver(pos):
            linked_list.color = (0, 0, 0)
        else:
            linked_list.color = BROWN
        if maze_generator.isOver(pos):
            maze_generator.color = (0, 0, 0)
        else:
            maze_generator.color = BROWN

def button_click():
    if event.type == pygame.MOUSEBUTTONDOWN:
        if back_linked_list.isOver(pos):
            click_back()
        if A_star_search_path.isOver(pos):
            print('clicked A* Search Path')
        if bubble_sort.isOver(pos):
            print('clicked bubble sort')
        if linked_list.isOver(pos):
            print('clicked linked list')
            linked_list.clicked = True
        if maze_generator.isOver(pos):
            print('clicked maze generator')
        if add_linked_list.isOver(pos):
            first_node.amnt+=1
            first_node.animation = True

run = True

A_star_search_path = button(BROWN,500,600,350,100,'A* Search Path')
bubble_sort = button(BROWN,500,900,350,100,'Bubble Sort')
linked_list = button(BROWN,1000,900,350,100,'linked list')
maze_generator = button(BROWN,1000,600,350,100,'maze generator')


back_linked_list = button(LIME,10,950,350,100,'Back')
add_linked_list = button(LIME,1550,950,350,100,'Add')
first_node = node(0,0,0)

temp_y = 0
temp_x = 0


while run:
    if first_node.animation:
        if temp_x < 10:
            pygame.draw.rect(win,WHITE,(temp_x,temp_y,100,100),0)
            pygame.display.update()
            temp_x+=5
        else:
            if temp_y < 500:
                pygame.draw.rect(win,WHITE,(temp_x,temp_y,100,100),0)
                pygame.display.update()
                temp_y+=5
            else:
                temp_y = 0
                temp_x = 0
                first_node.animation = False
    if linked_list.clicked:
        draw_linked_list()
    else:
        redrawWindow()
    pygame.display.update()
    for event in pygame.event.get():
        pos = pygame.mouse.get_pos()
        if event.type == pygame.QUIT:
            run = False
            pygame.quit()
            quit()
        button_click()
        over()
